
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jun 07 15:04:52 CEST 2012
//----------------------------------------------------

package it.m2j;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Jun 07 15:04:52 CEST 2012
  */
public class minic2jasminParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public minic2jasminParser() {super();}

  /** Constructor which sets the default scanner. */
  public minic2jasminParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\003\003\000\002\032" +
    "\004\000\002\045\003\000\002\045\004\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\047\004\000\002\047\005\000\002\033\003\000\002" +
    "\033\005\000\002\033\004\000\002\026\002\000\002\026" +
    "\004\000\002\025\004\000\002\025\005\000\002\030\011" +
    "\000\002\027\010\000\002\027\006\000\002\036\003\000" +
    "\002\036\002\000\002\036\003\000\002\035\003\000\002" +
    "\035\002\000\002\035\003\000\002\043\004\000\002\043" +
    "\006\000\002\043\005\000\002\044\003\000\002\044\005" +
    "\000\002\042\003\000\002\042\003\000\002\041\002\000" +
    "\002\040\005\000\002\004\002\000\002\004\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\004\000\002\010\006\000" +
    "\002\010\007\000\002\050\005\000\002\050\006\000\002" +
    "\037\005\000\002\037\006\000\002\020\005\000\002\021" +
    "\006\000\002\022\011\000\002\023\006\000\002\024\003" +
    "\000\002\024\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\015\005\000\002\015\005\000\002\015\004\000\002\015" +
    "\006\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\015\004\000\002\015\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\020\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\ufff3\011\ufff3\001\002\000\020\002\000\004\017" +
    "\005\007\006\016\007\020\010\012\011\014\001\002\000" +
    "\004\002\006\001\002\000\004\002\001\001\002\000\012" +
    "\037\ufffb\042\ufffb\043\ufffb\051\ufffb\001\002\000\012\037" +
    "\ufffe\042\ufffe\043\231\051\ufffe\001\002\000\004\051\211" +
    "\001\002\000\012\037\ufffa\042\ufffa\043\ufffa\051\ufffa\001" +
    "\002\000\020\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\001\002\000\004\055\173\001\002\000" +
    "\004\051\uffe0\001\002\000\012\037\ufff9\042\ufff9\043\ufff9" +
    "\051\ufff9\001\002\000\012\037\ufffc\042\ufffc\043\ufffc\051" +
    "\ufffc\001\002\000\004\051\uffe1\001\002\000\004\045\022" +
    "\001\002\000\030\003\uffdd\004\uffdd\005\uffdd\006\uffdd\010" +
    "\uffdd\012\uffdd\014\uffdd\017\uffdd\045\uffdd\046\uffdd\051\uffdd" +
    "\001\002\000\020\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\001\002\000\030\003\040\004\017" +
    "\005\007\006\016\010\012\012\033\014\030\017\032\045" +
    "\uffdf\046\036\051\034\001\002\000\030\003\uffd4\004\uffd4" +
    "\005\uffd4\006\uffd4\010\uffd4\012\uffd4\014\uffd4\017\uffd4\045" +
    "\uffd4\046\uffd4\051\uffd4\001\002\000\004\040\172\001\002" +
    "\000\004\051\165\001\002\000\024\016\054\021\065\036" +
    "\055\041\061\051\064\052\057\053\063\054\060\055\056" +
    "\001\002\000\030\003\uffd7\004\uffd7\005\uffd7\006\uffd7\010" +
    "\uffd7\012\uffd7\014\uffd7\017\uffd7\045\uffd7\046\uffd7\051\uffd7" +
    "\001\002\000\024\016\054\021\065\036\055\041\061\051" +
    "\064\052\057\053\063\054\060\055\056\001\002\000\024" +
    "\016\054\021\065\036\055\041\061\051\064\052\057\053" +
    "\063\054\060\055\056\001\002\000\010\015\053\041\050" +
    "\043\051\001\002\000\030\003\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\010\uffd5\012\uffd5\014\uffd5\017\uffd5\045\uffd5\046\uffd5" +
    "\051\uffd5\001\002\000\040\002\uffde\003\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\017\uffde\045\uffde\046\uffde\051\uffde\001\002\000" +
    "\004\045\022\001\002\000\004\040\046\001\002\000\030" +
    "\003\uffd6\004\uffd6\005\uffd6\006\uffd6\010\uffd6\012\uffd6\014" +
    "\uffd6\017\uffd6\045\uffd6\046\uffd6\051\uffd6\001\002\000\004" +
    "\040\045\001\002\000\030\003\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\010\uffdc\012\uffdc\014\uffdc\017\uffdc\045\uffdc\046\uffdc" +
    "\051\uffdc\001\002\000\030\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\010\uffd8\012\uffd8\014\uffd8\017\uffd8\045\uffd8\046\uffd8" +
    "\051\uffd8\001\002\000\030\003\uffd9\004\uffd9\005\uffd9\006" +
    "\uffd9\010\uffd9\012\uffd9\014\uffd9\017\uffd9\045\uffd9\046\uffd9" +
    "\051\uffd9\001\002\000\030\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\010\uffd3\012\uffd3\014\uffd3\017\uffd3\045\uffd3\046\uffd3" +
    "\051\uffd3\001\002\000\030\003\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\010\uffdb\012\uffdb\014\uffdb\017\uffdb\045\uffdb\046\uffdb" +
    "\051\uffdb\001\002\000\026\016\054\021\065\036\055\041" +
    "\061\042\144\051\064\052\057\053\063\054\060\055\056" +
    "\001\002\000\024\016\054\021\065\036\055\041\061\051" +
    "\064\052\057\053\063\054\060\055\056\001\002\000\006" +
    "\015\137\043\124\001\002\000\024\016\054\021\065\036" +
    "\055\041\061\051\064\052\057\053\063\054\060\055\056" +
    "\001\002\000\012\004\017\005\007\006\016\010\012\001" +
    "\002\000\024\016\054\021\065\036\055\041\061\051\064" +
    "\052\057\053\063\054\060\055\056\001\002\000\046\020" +
    "\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037" +
    "\uffaf\040\uffaf\042\uffaf\044\uffaf\045\uffaf\001\002\000\046" +
    "\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1\027" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1" +
    "\037\uffb1\040\uffb1\042\uffb1\044\uffb1\045\uffb1\001\002\000" +
    "\046\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035" +
    "\uffae\037\uffae\040\uffae\042\uffae\044\uffae\045\uffae\001\002" +
    "\000\026\005\127\016\054\021\065\036\055\041\061\051" +
    "\064\052\057\053\063\054\060\055\056\001\002\000\046" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5\001\002\000" +
    "\046\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\037\uffb0\040\uffb0\042\uffb0\044\uffb0\045\uffb0\001\002" +
    "\000\052\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2" +
    "\035\uffb2\037\uffb2\040\uffb2\041\050\042\uffb2\043\051\044" +
    "\uffb2\045\uffb2\001\002\000\024\016\054\021\065\036\055" +
    "\041\061\051\064\052\057\053\063\054\060\055\056\001" +
    "\002\000\036\020\075\021\100\022\067\023\070\024\102" +
    "\026\072\027\104\030\101\031\074\032\076\033\071\034" +
    "\077\035\103\040\073\001\002\000\024\016\054\021\065" +
    "\036\055\041\061\051\064\052\057\053\063\054\060\055" +
    "\056\001\002\000\024\016\054\021\065\036\055\041\061" +
    "\051\064\052\057\053\063\054\060\055\056\001\002\000" +
    "\024\016\054\021\065\036\055\041\061\051\064\052\057" +
    "\053\063\054\060\055\056\001\002\000\024\016\054\021" +
    "\065\036\055\041\061\051\064\052\057\053\063\054\060" +
    "\055\056\001\002\000\030\003\uffd2\004\uffd2\005\uffd2\006" +
    "\uffd2\010\uffd2\012\uffd2\014\uffd2\017\uffd2\045\uffd2\046\uffd2" +
    "\051\uffd2\001\002\000\024\016\054\021\065\036\055\041" +
    "\061\051\064\052\057\053\063\054\060\055\056\001\002" +
    "\000\024\016\054\021\065\036\055\041\061\051\064\052" +
    "\057\053\063\054\060\055\056\001\002\000\024\016\054" +
    "\021\065\036\055\041\061\051\064\052\057\053\063\054" +
    "\060\055\056\001\002\000\024\016\054\021\065\036\055" +
    "\041\061\051\064\052\057\053\063\054\060\055\056\001" +
    "\002\000\024\016\054\021\065\036\055\041\061\051\064" +
    "\052\057\053\063\054\060\055\056\001\002\000\024\016" +
    "\054\021\065\036\055\041\061\051\064\052\057\053\063" +
    "\054\060\055\056\001\002\000\024\016\054\021\065\036" +
    "\055\041\061\051\064\052\057\053\063\054\060\055\056" +
    "\001\002\000\024\016\054\021\065\036\055\041\061\051" +
    "\064\052\057\053\063\054\060\055\056\001\002\000\024" +
    "\016\054\021\065\036\055\041\061\051\064\052\057\053" +
    "\063\054\060\055\056\001\002\000\046\020\075\021\100" +
    "\022\067\023\070\024\102\026\uffb8\027\uffb8\030\101\031" +
    "\074\032\076\033\071\034\uffb8\035\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\044\uffb8\045\uffb8\001\002\000\046\020\075\021" +
    "\100\022\067\023\070\024\102\026\072\027\104\030\101" +
    "\031\074\032\076\033\071\034\077\035\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\044\uffc0\045\uffc0\001\002\000\046\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7" +
    "\040\uffb7\042\uffb7\044\uffb7\045\uffb7\001\002\000\046\020" +
    "\075\021\100\022\067\023\070\024\102\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\040\uffbd\042\uffbd\044\uffbd\045\uffbd\001\002\000\046" +
    "\020\uffc5\021\uffc5\022\067\023\070\024\102\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\037\uffc5\040\uffc5\042\uffc5\044\uffc5\045\uffc5\001\002\000" +
    "\046\020\075\021\100\022\067\023\070\024\102\026\072" +
    "\027\104\030\101\031\074\032\076\033\071\034\uffc1\035" +
    "\uffc1\037\uffc1\040\uffc1\042\uffc1\044\uffc1\045\uffc1\001\002" +
    "\000\046\020\075\021\100\022\067\023\070\024\102\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\037\uffbb\040\uffbb\042\uffbb\044\uffbb\045\uffbb\001" +
    "\002\000\046\020\uffc6\021\uffc6\022\067\023\070\024\102" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\042\uffc6\044\uffc6\045\uffc6" +
    "\001\002\000\046\020\075\021\100\022\067\023\070\024" +
    "\102\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\037\uffbc\040\uffbc\042\uffbc\044\uffbc\045" +
    "\uffbc\001\002\000\046\020\075\021\100\022\067\023\070" +
    "\024\102\026\uffb9\027\uffb9\030\101\031\074\032\076\033" +
    "\071\034\uffb9\035\uffb9\037\uffb9\040\uffb9\042\uffb9\044\uffb9" +
    "\045\uffb9\001\002\000\046\020\075\021\100\022\067\023" +
    "\070\024\102\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba" +
    "\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba\042\uffba\044" +
    "\uffba\045\uffba\001\002\000\046\020\uffc3\021\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3\040\uffc3\042\uffc3" +
    "\044\uffc3\045\uffc3\001\002\000\046\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\042" +
    "\uffc4\044\uffc4\045\uffc4\001\002\000\046\020\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\037\uffc2\040\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\001\002\000\050\020\uffb4\021" +
    "\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040" +
    "\uffb4\042\uffb4\043\124\044\uffb4\045\uffb4\001\002\000\024" +
    "\016\054\021\065\036\055\041\061\051\064\052\057\053" +
    "\063\054\060\055\056\001\002\000\036\020\075\021\100" +
    "\022\067\023\070\024\102\026\072\027\104\030\101\031" +
    "\074\032\076\033\071\034\077\035\103\044\126\001\002" +
    "\000\052\015\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\001\002\000\004\042\132\001\002\000\036" +
    "\020\075\021\100\022\067\023\070\024\102\026\072\027" +
    "\104\030\101\031\074\032\076\033\071\034\077\035\103" +
    "\042\131\001\002\000\046\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\042\uffb6\044" +
    "\uffb6\045\uffb6\001\002\000\024\016\054\021\065\036\055" +
    "\041\061\051\064\052\057\053\063\054\060\055\056\001" +
    "\002\000\046\020\075\021\100\022\067\023\070\024\102" +
    "\026\072\027\104\030\101\031\074\032\076\033\071\034" +
    "\077\035\103\037\uffbe\040\uffbe\042\uffbe\044\uffbe\045\uffbe" +
    "\001\002\000\046\020\075\021\100\022\067\023\070\024" +
    "\102\026\uffbf\027\uffbf\030\101\031\074\032\076\033\071" +
    "\034\uffbf\035\uffbf\037\uffbf\040\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\001\002\000\004\043\051\001\002\000\050\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027\uffb3\030" +
    "\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3" +
    "\040\uffb3\042\uffb3\043\124\044\uffb3\045\uffb3\001\002\000" +
    "\024\016\054\021\065\036\055\041\061\051\064\052\057" +
    "\053\063\054\060\055\056\001\002\000\036\020\075\021" +
    "\100\022\067\023\070\024\102\026\072\027\104\030\101" +
    "\031\074\032\076\033\071\034\077\035\103\040\141\001" +
    "\002\000\030\003\uffd1\004\uffd1\005\uffd1\006\uffd1\010\uffd1" +
    "\012\uffd1\014\uffd1\017\uffd1\045\uffd1\046\uffd1\051\uffd1\001" +
    "\002\000\036\020\075\021\100\022\067\023\070\024\102" +
    "\026\072\027\104\030\101\031\074\032\076\033\071\034" +
    "\077\035\103\044\143\001\002\000\052\015\uffd0\020\uffd0" +
    "\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0" +
    "\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\001\002\000" +
    "\046\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\042\uffce\044\uffce\045\uffce\001\002" +
    "\000\006\037\147\042\150\001\002\000\040\020\075\021" +
    "\100\022\067\023\070\024\102\026\072\027\104\030\101" +
    "\031\074\032\076\033\071\034\077\035\103\037\uffc8\042" +
    "\uffc8\001\002\000\024\016\054\021\065\036\055\041\061" +
    "\051\064\052\057\053\063\054\060\055\056\001\002\000" +
    "\046\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\042\uffcd\044\uffcd\045\uffcd\001\002" +
    "\000\040\020\075\021\100\022\067\023\070\024\102\026" +
    "\072\027\104\030\101\031\074\032\076\033\071\034\077" +
    "\035\103\037\uffc7\042\uffc7\001\002\000\036\020\075\021" +
    "\100\022\067\023\070\024\102\026\072\027\104\030\101" +
    "\031\074\032\076\033\071\034\077\035\103\045\uffdf\001" +
    "\002\000\004\045\022\001\002\000\032\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\010\uffcb\012\uffcb\013\155\014\uffcb\017" +
    "\uffcb\045\uffcb\046\uffcb\051\uffcb\001\002\000\004\045\uffdf" +
    "\001\002\000\004\045\022\001\002\000\030\003\uffca\004" +
    "\uffca\005\uffca\006\uffca\010\uffca\012\uffca\014\uffca\017\uffca" +
    "\045\uffca\046\uffca\051\uffca\001\002\000\036\020\075\021" +
    "\100\022\067\023\070\024\102\026\072\027\104\030\101" +
    "\031\074\032\076\033\071\034\077\035\103\040\161\001" +
    "\002\000\030\003\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc" +
    "\012\uffcc\014\uffcc\017\uffcc\045\uffcc\046\uffcc\051\uffcc\001" +
    "\002\000\036\020\075\021\100\022\067\023\070\024\102" +
    "\026\072\027\104\030\101\031\074\032\076\033\071\034" +
    "\077\035\103\045\uffdf\001\002\000\004\045\022\001\002" +
    "\000\030\003\uffc9\004\uffc9\005\uffc9\006\uffc9\010\uffc9\012" +
    "\uffc9\014\uffc9\017\uffc9\045\uffc9\046\uffc9\051\uffc9\001\002" +
    "\000\010\037\ufff6\040\ufff6\051\ufff6\001\002\000\010\037" +
    "\167\040\uffff\051\170\001\002\000\004\051\171\001\002" +
    "\000\010\037\ufff4\040\ufff4\051\ufff4\001\002\000\010\037" +
    "\ufff5\040\ufff5\051\ufff5\001\002\000\030\003\uffda\004\uffda" +
    "\005\uffda\006\uffda\010\uffda\012\uffda\014\uffda\017\uffda\045" +
    "\uffda\046\uffda\051\uffda\001\002\000\014\004\017\005\007" +
    "\006\016\007\020\010\012\001\002\000\004\040\175\001" +
    "\002\000\020\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0" +
    "\010\ufff0\011\ufff0\001\002\000\004\051\177\001\002\000" +
    "\004\041\200\001\002\000\016\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\042\uffdf\001\002\000\016\004\017\005" +
    "\007\006\016\007\205\010\012\042\uffe8\001\002\000\004" +
    "\042\210\001\002\000\006\037\206\042\uffe7\001\002\000" +
    "\006\037\uffe3\042\uffe3\001\002\000\004\042\uffe9\001\002" +
    "\000\012\004\017\005\007\006\016\010\012\001\002\000" +
    "\006\037\uffe2\042\uffe2\001\002\000\004\040\uffef\001\002" +
    "\000\020\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\041" +
    "\212\045\uffdf\001\002\000\016\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\042\uffdf\001\002\000\016\004\017\005" +
    "\007\006\016\007\216\010\012\045\uffeb\001\002\000\004" +
    "\051\225\001\002\000\004\045\uffed\001\002\000\006\042" +
    "\uffec\045\uffec\001\002\000\020\004\017\005\007\006\016" +
    "\010\012\037\220\042\uffea\045\uffea\001\002\000\012\004" +
    "\017\005\007\006\016\010\012\001\002\000\004\051\222" +
    "\001\002\000\020\004\uffe4\005\uffe4\006\uffe4\010\uffe4\037" +
    "\uffe4\042\uffe4\045\uffe4\001\002\000\004\051\224\001\002" +
    "\000\020\004\uffe5\005\uffe5\006\uffe5\010\uffe5\037\uffe5\042" +
    "\uffe5\045\uffe5\001\002\000\020\004\uffe6\005\uffe6\006\uffe6" +
    "\010\uffe6\037\uffe6\042\uffe6\045\uffe6\001\002\000\016\004" +
    "\017\005\007\006\016\007\216\010\012\042\uffeb\001\002" +
    "\000\004\042\230\001\002\000\004\045\uffee\001\002\000" +
    "\004\044\235\001\002\000\012\037\ufffd\042\ufffd\043\233" +
    "\051\ufffd\001\002\000\004\044\234\001\002\000\012\037" +
    "\ufff7\042\ufff7\043\ufff7\051\ufff7\001\002\000\012\037\ufff8" +
    "\042\ufff8\043\ufff8\051\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\003\004\026\003\001\001\000\014\025" +
    "\012\027\020\042\010\045\014\046\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\022\001\001\000\004\004\023\001\001\000\002\001" +
    "\001\000\030\005\042\010\043\020\030\021\040\022\034" +
    "\023\024\032\025\037\041\041\036\045\026\046\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\165" +
    "\001\001\000\006\015\161\037\061\001\001\000\002\001" +
    "\001\000\006\015\157\037\061\001\001\000\006\015\151" +
    "\037\061\001\001\000\004\050\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\145\024\144\037\061\001" +
    "\001\000\006\015\141\037\061\001\001\000\002\001\001" +
    "\000\006\015\065\037\061\001\001\000\004\046\134\001" +
    "\001\000\006\015\133\037\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\127\037" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\122\001\001\000\006\015\121\037\061\001\001\000" +
    "\002\001\001\000\006\015\120\037\061\001\001\000\006" +
    "\015\117\037\061\001\001\000\006\015\116\037\061\001" +
    "\001\000\006\015\115\037\061\001\001\000\002\001\001" +
    "\000\006\015\114\037\061\001\001\000\006\015\113\037" +
    "\061\001\001\000\006\015\112\037\061\001\001\000\006" +
    "\015\111\037\061\001\001\000\006\015\110\037\061\001" +
    "\001\000\006\015\107\037\061\001\001\000\006\015\106" +
    "\037\061\001\001\000\006\015\105\037\061\001\001\000" +
    "\006\015\104\037\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\124\037\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\132\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\135\001\001" +
    "\000\002\001\001\000\006\015\137\037\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\150\037\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\152\001\001\000\004\040" +
    "\153\001\001\000\002\001\001\000\004\041\155\001\001" +
    "\000\004\040\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\162\001\001\000\004" +
    "\040\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\175\045\014\046" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\200\001\001\000" +
    "\012\035\201\044\202\045\203\046\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\206\046\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\212\001\001\000\004\041" +
    "\225\001\001\000\012\036\214\043\216\045\213\046\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\220\046\007\001\001\000\006\045\222" +
    "\046\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\036\226\043\216\045\213\046\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$minic2jasminParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$minic2jasminParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$minic2jasminParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	// Redefinition of error functions
	    public void report_error(String message, Object info) {
	        System.err.print("ERROR: Syntax error");
	        if (info instanceof Symbol)
	            if (((Symbol)info).left != -1){
	                int line = (((Symbol)info).left)+1;
	                int column = (((Symbol)info).right)+1;
	                System.err.print(" (linea "+line+", colonna "+column+"): ");
	            } else System.err.print(": ");
	        else System.err.print(": ");
	    }
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$minic2jasminParser$actions {


        

  private final minic2jasminParser parser;

  /** Constructor */
  CUP$minic2jasminParser$actions(minic2jasminParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$minic2jasminParser$do_action(
    int                        CUP$minic2jasminParser$act_num,
    java_cup.runtime.lr_parser CUP$minic2jasminParser$parser,
    java.util.Stack            CUP$minic2jasminParser$stack,
    int                        CUP$minic2jasminParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$minic2jasminParser$result;

      /* select the action based on the action number */
      switch (CUP$minic2jasminParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= CONST_FLOAT 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= CONST_STRING 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= CONST_INT 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= CONST_BOOL 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= ID 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= NEW simple_type array_index 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= ID array_index 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= fun_call 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= BRA_O expr BRA_C 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= expr OP_MOD expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= expr OP_NEQ expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= expr OP_EQ expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= expr OP_GET expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= expr OP_GT expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= expr OP_LET expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= expr OP_LT expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= BRA_O TYPE_INT BRA_C expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= OP_NOT expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= expr OP_OR expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= expr OP_AND expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= OP_DIFF expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr OP_DIV expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr OP_TIME expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr OP_DIFF expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr OP_PLUS expr 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(11/*expr*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_list ::= expr_list COMMA expr 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(18/*expr_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_list ::= expr 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(18/*expr_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // while_stmt ::= WHILE expr block_in block 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(17/*while_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // if_then_else_stmt ::= IF expr block_in block ELSE block_in block 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(16/*if_then_else_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // if_then_stmt ::= IF expr block_in block 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(15/*if_then_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ret_stmt ::= RETURN expr SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(14/*ret_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // fun_call ::= ID BRA_O expr_list BRA_C 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(29/*fun_call*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // fun_call ::= ID BRA_O BRA_C 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(29/*fun_call*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_index ::= array_index BRA_OS expr BRA_CS 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(38/*array_index*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // array_index ::= BRA_OS expr BRA_CS 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(38/*array_index*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_stmt ::= ID array_index ASSIGN expr SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(6/*assign_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_stmt ::= ID ASSIGN expr SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(6/*assign_stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= error SEMI 
            { 
              Object RESULT = null;
		
									System.err.println("Statement errato");
								
              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= while_stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= if_then_else_stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= if_then_stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= ret_stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= assign_stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= fun_call SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= decl SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= block_in block 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt_list ::= stmt_list stmt 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(2/*stmt_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt_list ::= 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(2/*stmt_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block ::= BRA_OG stmt_list BRA_CG 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(30/*block*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block_in ::= 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(31/*block_in*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ret_type ::= type 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(32/*ret_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ret_type ::= TYPE_VOID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(32/*ret_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // decl_param_list ::= decl_param_list COMMA type 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(34/*decl_param_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // decl_param_list ::= type 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(34/*decl_param_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param_list ::= param_list type ID 
            { 
              Object RESULT = null;
		
										 	System.out.println("Manca il carattere ','");
										 
              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(33/*param_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param_list ::= param_list COMMA type ID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(33/*param_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param_list ::= type ID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(33/*param_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // decl_param ::= decl_param_list 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(27/*decl_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // decl_param ::= 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(27/*decl_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // decl_param ::= TYPE_VOID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(27/*decl_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formal_param ::= param_list 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(28/*formal_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // formal_param ::= 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(28/*formal_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // formal_param ::= TYPE_VOID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(28/*formal_param*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fun_def ::= ret_type ID block_in formal_param 
            { 
              Object RESULT = null;
		
																System.out.println("Funzione mal definita.");
															
              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(21/*fun_def*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fun_def ::= ret_type ID BRA_O block_in formal_param BRA_C 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(21/*fun_def*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fun_def_ext ::= CONST_STRING ret_type ID BRA_O block_in decl_param BRA_C 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(22/*fun_def_ext*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function ::= EXTERN fun_def_ext SEMI 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(19/*function*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function ::= fun_def block 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(19/*function*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fun_list ::= fun_list function 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(20/*fun_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // fun_list ::= 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(20/*fun_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // var_list ::= var_list ID 
            { 
              Object RESULT = null;
		 
									System.out.println("Manca il carattere ',' per separare gli identificatori.");
								 
              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // var_list ::= var_list COMMA ID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // var_list ::= ID 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(25/*var_list*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // array_dim ::= array_dim BRA_OS BRA_CS 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(37/*array_dim*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // array_dim ::= BRA_OS BRA_CS 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(37/*array_dim*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_type ::= TYPE_STRING 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(36/*simple_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_type ::= TYPE_FLOAT 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(36/*simple_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_type ::= TYPE_INT 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(36/*simple_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // simple_type ::= TYPE_BOOL 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(36/*simple_type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= simple_type array_dim 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(35/*type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= simple_type 
            { 
              String RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(35/*type*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl ::= type var_list 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(24/*decl*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= fun_list 
            { 
              Object RESULT = null;

              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          return CUP$minic2jasminParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).value;
		RESULT = start_val;
              CUP$minic2jasminParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$minic2jasminParser$stack.elementAt(CUP$minic2jasminParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$minic2jasminParser$parser.done_parsing();
          return CUP$minic2jasminParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

