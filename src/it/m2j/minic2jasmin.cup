import java_cup.runtime.*;
import java.io.*;

//init with {: scanner.init();              :};
//scan with {: return scanner.next_token(); :};

parser code {:
	// Redefinition of error functions
	    public void report_error(String message, Object info) {
	        System.err.print("ERROR: Syntax error");
	        if (info instanceof Symbol)
	            if (((Symbol)info).left != -1){
	                int line = (((Symbol)info).left)+1;
	                int column = (((Symbol)info).right)+1;
	                System.err.print(" (linea "+line+", colonna "+column+"): ");
	            } else System.err.print(": ");
	        else System.err.print(": ");
	    }
    :};

action code {:
        
:}

// Terminal tokens
terminal TYPE_BOOL, TYPE_INT, TYPE_STRING, TYPE_VOID, TYPE_FLOAT;
terminal EXTERN;
terminal IF, ELSE, WHILE;
terminal ASSIGN, NEW, RETURN;
terminal OP_PLUS, OP_DIFF, OP_TIME, OP_DIV, OP_MOD, OP_SIGN;
terminal OP_EQ, OP_NEQ, OP_LT, OP_LET, OP_GT, OP_GET, OP_AND, OP_OR, OP_NOT;
terminal COMMA, SEMI;
terminal BRA_O, BRA_C, BRA_OS, BRA_CS, BRA_OG, BRA_CG;
terminal INT, DOUBLE;

terminal String ID;
terminal Bool CONST_BOOL;
terminal Integer CONST_INT;
terminal Float CONST_FLOAT;
terminal String CONST_STRING;

// Non terminal tokens
non terminal prog, stmt_list, stmt, if, while, assign_stmt, print;
non terminal Integer[] nt0_while;
non terminal Integer nt0_if, nt1_if;
non terminal String expr;
non terminal minug, magug;
non terminal ret_stmt, if_then_stmt, if_then_else_stmt, while_stmt;
non terminal expr_list;

non terminal function, fun_list, fun_def, fun_def_ext, decl_list, decl, var_list, var, decl_param, formal_param, fun_call;
non terminal block, block_in, ret_type, param_list, decl_param_list;
non terminal String type, simple_type, array_dim, array_index;
non terminal String if_condition, while_condition;
non terminal String id;

//lower priority
precedence left OP_OR;
precedence left OP_AND;
precedence left OP_EQ, OP_NEQ;
precedence nonassoc OP_NOT;
precedence left OP_LT, OP_LET, OP_GT, OP_GET;
precedence left OP_PLUS, OP_DIFF;
precedence left OP_TIME, OP_DIV, OP_MOD;
precedence nonassoc OP_SIGN;
//highest priority

start with prog;

prog ::= fun_list
        ;

decl ::= type var_list                          
            ;

type ::= simple_type                                       
     | simple_type array_dim                              
     ;

simple_type ::= TYPE_BOOL
             | TYPE_INT
             | TYPE_FLOAT
             | TYPE_STRING
             ;

array_dim ::= BRA_OS BRA_CS
         | array_dim BRA_OS BRA_CS                       
         ;

var_list ::= ID
       | var_list COMMA ID
       | var_list ID /* error */ {: 
									System.out.println("Manca il carattere ',' per separare gli identificatori.");
								 :}
       ;

fun_list ::= /* empty */
             | fun_list function
             ;

function ::= fun_def block       
       | EXTERN fun_def_ext SEMI					
       ;

fun_def_ext ::= CONST_STRING ret_type ID BRA_O block_in decl_param BRA_C                               			          		
            ;

fun_def ::= ret_type ID BRA_O block_in formal_param BRA_C
            | ret_type ID block_in formal_param /* error */ {:
																System.out.println("Funzione mal definita.");
															:}
            ;

formal_param ::= TYPE_VOID
	    | /* empty */
        | param_list                                 
        ;
            
decl_param ::= TYPE_VOID                            
	    |/* empty */											
		| decl_param_list                             
        ;

param_list ::= type ID                                     
		| param_list COMMA type ID                     
		| param_list type ID /* error */ {:
										 	System.out.println("Manca il carattere ','");
										 :}             
    	;
          
decl_param_list ::= type                                    
        | decl_param_list COMMA type                    
        ;

ret_type ::= TYPE_VOID                                  
        | type                                       
        ;


block_in ::= /* empty */   //controllo EOF (da rivedere)                               
		;

block ::= BRA_OG stmt_list BRA_CG                     
		;

stmt_list ::= /* empty */ //controllo EOF (da rivedere)                    
		| stmt_list stmt                 
        ;

stmt ::= block_in block                              
		| decl SEMI                            
		| fun_call SEMI                           
		| assign_stmt                             
		| ret_stmt                             
		| if_then_stmt                             
		| if_then_else_stmt                         
		| while_stmt                              
		| error SEMI			{:
									System.err.println("Statement errato");
								:}       
        ;

assign_stmt ::= ID ASSIGN expr SEMI            
		| ID array_index ASSIGN expr SEMI  
        ;

array_index ::= BRA_OS expr BRA_CS                   
		| array_index BRA_OS expr BRA_CS        
        ;

fun_call ::= ID BRA_O /* no params */ BRA_C           
		| ID BRA_O expr_list BRA_C            
        ;

ret_stmt ::= RETURN expr SEMI                
        ;

if_then_stmt ::= IF expr block_in block          
        ;

if_then_else_stmt ::= IF expr block_in block
        ELSE block_in block                
        ;

while_stmt ::= WHILE expr block_in block         
        ;

expr_list ::= expr                             
        | expr_list COMMA expr        
        ;

expr ::= expr OP_PLUS expr              
        | expr OP_DIFF expr              
        | expr OP_TIME expr              
        | expr OP_DIV expr               
		| OP_DIFF expr %prec OP_SIGN           
        | expr OP_AND expr               
        | expr OP_OR expr                
        | OP_NOT expr                          
        | BRA_O TYPE_INT BRA_C expr            
        | expr OP_LT expr                
        | expr OP_LET expr               
        | expr OP_GT expr                
        | expr OP_GET expr               
        | expr OP_EQ expr                
        | expr OP_NEQ expr               
        | expr OP_MOD expr               
        | BRA_O expr BRA_C                     
        | fun_call                               
        | ID array_index                             
        | NEW simple_type array_index                  
        | ID                                         
        | CONST_BOOL                                 
        | CONST_INT                                  
        | CONST_STRING                               
        | CONST_FLOAT                               
        ;

